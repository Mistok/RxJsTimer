{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","isRunning","setIsRunning","currentTimer","setCurrentTimer","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","className","Date","toISOString","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,I,0CC0EAA,MAhEf,WAAgB,IAAD,EAEoBC,oBAAS,GAF7B,mBAEPC,EAFO,KAEIC,EAFJ,OAI0BF,mBAAS,GAJnC,mBAIPG,EAJO,KAIOC,EAJP,KAuCb,OAhCEC,qBAAU,WACN,IAAMC,EAAe,IAAIC,IAUzB,OATAC,YAAS,KAAKC,KACNC,YAAUJ,IAChBK,WACE,kBACIV,EACMG,GAAgB,SAAAQ,GAAG,OAAIA,EAAM,OAC7B,QAGP,WACHN,EAAaO,OACbP,EAAaQ,cAElB,CAACb,IAkBJ,sBAAKc,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,gCAGE,qBAAKA,UAAU,YAAf,SAEI,+BACM,IAAIC,KAAKb,GAAcc,cAAcC,MAAM,GAAI,QAIzD,gCAEQjB,EACM,wBAAQc,UAAU,mBAAmBI,QA3BpC,WAChBjB,GAAa,IA0BE,mBACA,wBAAQa,UAAU,mBAAmBI,QAhCpC,WACfjB,GAAa,IA+BC,mBAEV,wBAAQa,UAAU,kBAAkBI,QA3B1B,WACfjB,GAAa,GACbE,EAAgB,IAyBX,kBACA,wBAAQW,UAAU,kBAAkBI,QAvBzB,WAChBf,EAAgB,IAsBX,0BCxDGgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79951b0c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, {useEffect, useState} from \"react\";\nimport {interval, Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\n\n\n\n\nfunction App() {\n\n   let [isRunning, setIsRunning] = useState(false)\n\n   let [currentTimer, setCurrentTimer] = useState(0)\n\n\n    useEffect(() => {\n        const unsubscribe$ = new Subject();\n        interval(300).pipe(\n                takeUntil(unsubscribe$)\n        ).subscribe(\n            () =>\n                isRunning\n                    ? setCurrentTimer(val => val + 1000) //time in milliseconds\n                    : null\n\n        )\n        return () => {\n            unsubscribe$.next();\n            unsubscribe$.complete();\n        }\n    }, [isRunning])\n    let startHandler = () => {\n        setIsRunning(true)\n\n    }\n    let pauseHandler = () => {\n       setIsRunning(false)\n    }\n    let stopHandler = () => {\n       setIsRunning(false)\n       setCurrentTimer(0)\n    }\n\n    let resetHandler = () => {\n       setCurrentTimer(0)\n    }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        testing task timer\n      </header>\n        <div className=\"time_desk\">\n\n            <span>\n                { new Date(currentTimer).toISOString().slice(11, 19) }\n            </span>\n        </div>\n\n        <div>\n            {\n                isRunning\n                    ? <button className=\"btn btn-primary \" onClick={pauseHandler}>pause</button>\n                    : <button className=\"btn btn-primary \" onClick={startHandler}>start</button>\n            }\n            <button className=\"btn btn-primary\" onClick={stopHandler}>stop</button>\n            <button className=\"btn btn-primary\" onClick={resetHandler}>reset</button>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}