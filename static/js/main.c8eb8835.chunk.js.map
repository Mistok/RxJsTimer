{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isRunning","setIsRunning","currentTimer","setCurrentTimer","firstClickTime","setFirstClickTime","useEffect","stopTimeout","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","startHandler","className","Date","toISOString","slice","disabled","onClick","firstClick","now","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA+EeA,MAxEf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAE2BF,mBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,OAG+BJ,mBAAS,GAHxC,mBAGNK,EAHM,KAGUC,EAHV,KAKXC,qBAAU,WACN,IAAMC,EAAc,IAAIC,IASxB,OARAC,YAAS,KAAMC,KACPC,YAAUJ,IAChBK,WACE,kBACIZ,EACMG,GAAgB,SAAAU,GAAG,OAAIA,EAAM,OAC7B,QAEP,WACHN,EAAYO,OACZP,EAAYQ,cAEjB,CAACf,IAEJ,IAAIgB,EAAe,WACff,GAAa,IA8BjB,OACA,sBAAKgB,UAAU,MAAf,UACI,wBAAQA,UAAU,aAAlB,gCAGA,qBAAKA,UAAU,YAAf,SACI,+BACM,IAAIC,KAAKhB,GAAciB,cAAcC,MAAM,GAAI,QAGzD,gCACI,wBAAQH,UAAU,kBAAkBI,SAAUrB,EAAWsB,QAASN,EAAlE,mBACA,wBAAQC,UAAU,iBAAiBK,QAvCzB,WACdrB,GAAa,GACbE,EAAgB,IAqCZ,kBACA,wBAAQc,UAAU,eAAeK,QAnCvB,WACd,IAAIlB,EAAgB,CAChB,IAAImB,EAAaL,KAAKM,MAEtB,OADAnB,EAAkBkB,GACX,KAEWL,KAAKM,MACQpB,EACd,MACbH,GAAa,GACbI,EAAkB,IAEtBA,EAAkB,IAuBlB,kBACA,wBAAQY,UAAU,kBAAkBK,QApBzB,WACfrB,GAAa,GACbE,EAAgB,GAChBsB,WAAWT,EAAc,IAiBrB,0BC7DGU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8eb8835.chunk.js","sourcesContent":["\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, {useEffect, useState} from \"react\";\nimport {interval, Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\n\nfunction App() {\n    let [isRunning, setIsRunning] = useState(false);\n    let [currentTimer, setCurrentTimer] = useState(0);\n    let [firstClickTime, setFirstClickTime] = useState(0);\n\n    useEffect(() => {\n        const stopTimeout = new Subject();\n        interval(1000).pipe(\n                takeUntil(stopTimeout)\n        ).subscribe(\n            () =>\n                isRunning\n                    ? setCurrentTimer(val => val + 1000) //time in milliseconds\n                    : null\n        )\n        return () => {\n            stopTimeout.next();\n            stopTimeout.complete();\n        }\n    }, [isRunning])\n\n    let startHandler = () => {\n        setIsRunning(true);\n    }\n\n    let stopHandler = () => {\n        setIsRunning(false);\n        setCurrentTimer(0);\n    }\n\n    let waitHandler = () => {\n        if(!firstClickTime) {\n            let firstClick = Date.now();\n            setFirstClickTime(firstClick);\n            return null;\n        } else {\n            let secondClick = Date.now()\n            let difference = secondClick - firstClickTime;\n            if( difference < 300 ) {\n                setIsRunning(false);\n                setFirstClickTime(0);\n            }\n            setFirstClickTime(0);\n        }\n    }\n\n    let resetHandler = () => {\n        setIsRunning(false);\n        setCurrentTimer(0);\n        setTimeout(startHandler, 0) // restarting timeout\n    }\n\n    return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n        Testing task timer\n        </header>\n        <div className=\"time_desk\">\n            <span>\n                { new Date(currentTimer).toISOString().slice(11, 19) }\n            </span>\n        </div>\n        <div>\n            <button className=\"btn btn-primary\" disabled={isRunning} onClick={startHandler}>start</button>\n            <button className=\"btn btn-danger\" onClick={stopHandler}>stop</button>\n            <button className=\"btn btn-info\" onClick={waitHandler}>wait</button>\n            <button className=\"btn btn-success\" onClick={resetHandler}>reset</button>\n        </div>\n    </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}